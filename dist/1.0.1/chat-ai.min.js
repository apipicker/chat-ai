/*! Chat Widget v1.0.1 | MIT License */
class ApiPickerChatAi{static init(t){let e=new ApiPickerChatAi(t);return(async()=>{await e.setupEvents(),await e.checkAuth(),e.render()})(),e}constructor(t){this.config=t,this.isOpen=!1,this.user=null,this.apiUrl="http://127.0.0.1:7007"}log(...t){this.config?.debug&&console.log("ApiPickerAi",t)}render(){this.container=document.createElement("div"),this.container.id="chat-container",this.container.innerHTML=`
        <div class="chat-toggle" >
          ðŸ’¬
        </div>
       <div class="chat-container">
  <div class="chat-header">
    <h3>${this?.app?.setting?.ainame}</h3>
    <button class="chat-close-btn">Ã—</button>
  </div>
  
  <div class="chat-body">
   ${this?.app?.setting?.welcome&&`<div class="chat-message other-message">
   ${this?.app?.setting?.welcome}
      <span class="message-meta">${this.getTime(new Date)}</span>
    </div>`}
    
   
  </div>
  
  <div class="chat-status"> 
    <div class="typing-indicator">
      <div class="typing-dot"></div>
      <div class="typing-dot"></div>
      <div class="typing-dot"></div>
    </div>
  </div>
  
  <div class="chat-footer">
    <div class="chat-input-group">
      <input type="text" class="chat-input" id="chat-input" placeholder="${this?.app?.setting?.defaultText||"..."}">
      <button class="chat-send-btn">Send</button>
    </div>
  </div>
</div>
      `,document.body.appendChild(this.container),this.addEventListeners()}async setupEvents(){var t=await this.loadConfig();this.log(t),this.app=t?.data}getTime(t){var e;return t instanceof Date&&!isNaN(t)?((e=t.getHours())%12||12)+`:${t.getMinutes().toString().padStart(2,"0")} `+(12<=e?"PM":"AM"):(this.log("Invalid Date object"),null)}async checkAuth(){}addEventListeners(){this.container.querySelector(".chat-toggle").addEventListener("click",()=>{this.container.classList.toggle("open")}),this.container.querySelector(".chat-close-btn").addEventListener("click",()=>{this.container.classList.toggle("open")}),this.container.querySelector(".chat-send-btn").addEventListener("click",this.sendMessage.bind(this)),this.container.querySelector("#chat-input").addEventListener("keypress",t=>{"Enter"===t.key&&this.sendMessage()})}async sendMessage(){var t=this.container.querySelector("#chat-input"),e=t.value.trim();if(this.log("message",e),e){this.showTypingIndicator();try{this.renderMessage({text:e,isUser:!0,timestamp:new Date}),t.value="";var s=await(await fetch(this.apiUrl+"/openai/message",{method:"POST",headers:{"Content-Type":"application/json","site-key":this.config?.siteKey},body:JSON.stringify({msg:e})})).json();this.log("data",s),this.renderMessage({text:s.data,isUser:!1,timestamp:new Date})}catch(t){console.error("Error sending message:",t)}this.hideTypingIndicator()}}showTypingIndicator(){var t=this.container.querySelector(".chat-status");t&&(t.style.display="flex")}hideTypingIndicator(){var t=this.container.querySelector(".chat-status");t&&(t.style.display="none")}renderMessage(t){var e=this.container.querySelector(".chat-body"),s=document.createElement("div");s.className="chat-message "+(t.isUser?"user-message":"other-message"),s.innerHTML=`
      ${t.text}
      <span class="message-meta">${this.getTime(t.timestamp)}</span>
    `,e.appendChild(s),e.scrollTop=e.scrollHeight}loadConfig(){return this.log("siteKey",this.config?.siteKey),fetch(this.apiUrl+"/openai",{method:"GET",headers:{accept:"*/*","site-key":this.config?.siteKey}}).then(t=>{if(t.ok)return t.json();throw new Error("HTTP error! status: "+t.status)}).catch(t=>t)}}